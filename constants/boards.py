SMALL_CIRCLE_BOARD = [
    #a b c d e f g h i j k l
    [0,0,0,1,1,1,1,1,1,0,0,0], #A
    [0,0,1,1,1,1,1,1,1,1,0,0], #B
    [0,1,1,1,1,1,1,1,1,1,1,0], #C
    [1,1,1,1,1,1,1,1,1,1,1,1], #D
    [1,1,1,1,1,1,1,1,1,1,1,1], #E
    [1,1,1,1,1,1,1,1,1,1,1,1], #F
    [1,1,1,1,1,1,1,1,1,1,1,1], #G
    [1,1,1,1,1,1,1,1,1,1,1,1], #H
    [1,1,1,1,1,1,1,1,1,1,1,1], #I
    [0,1,1,1,1,1,1,1,1,1,1,0], #J
    [0,0,1,1,1,1,1,1,1,1,0,0], #K
    [0,0,0,1,1,1,1,1,1,0,0,0], #L
]

MEDIUM_CIRCLE_BOARD = [
    #a b c d e f g h i j k l m n o p q r s
    [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0], #A
    [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0], #B
    [0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0], #C
    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], #D
    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], #E
    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], #F
    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], #G
    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], #H
    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], #I
    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], #J
    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], #K
    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], #L
    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], #M
    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], #N
    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], #O
    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], #P
    [0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0], #Q
    [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0], #R
    [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0]  #S
]

LARGE_CIRCLE_BOARD = [
    #a b c d e f g h i j k l m n o p q r s t u v w x
    [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0], #A
    [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0], #B
    [0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0], #C
    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], #D
    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], #E
    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], #F
    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], #G
    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], #H
    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], #I
    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], #J
    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], #K
    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], #L
    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], #M
    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], #N
    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], #O
    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], #P
    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], #Q
    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], #R
    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], #S
    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], #T
    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], #U
    [0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0], #V
    [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0], #W
    [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0]  #X
]

SMALL_DIAMOND_BOARD = [
    #a b c d e f g h i j k l m
    [0,0,0,0,0,0,1,0,0,0,0,0,0], #A
    [0,0,0,0,0,1,1,1,0,0,0,0,0], #B
    [0,0,0,0,1,1,1,1,1,0,0,0,0], #C
    [0,0,0,1,1,1,1,1,1,1,0,0,0], #D
    [0,0,1,1,1,1,1,1,1,1,1,0,0], #E
    [0,1,1,1,1,1,1,1,1,1,1,1,0], #F
    [1,1,1,1,1,1,1,1,1,1,1,1,1], #G
    [0,1,1,1,1,1,1,1,1,1,1,1,0], #H
    [0,0,1,1,1,1,1,1,1,1,1,0,0], #I
    [0,0,0,1,1,1,1,1,1,1,0,0,0], #J
    [0,0,0,0,1,1,1,1,1,0,0,0,0], #K
    [0,0,0,0,0,1,1,1,0,0,0,0,0], #L
    [0,0,0,0,0,0,1,0,0,0,0,0,0], #M
]

MEDIUM_DIAMOND_BOARD = [
    #a b c d e f g h i j k l m n o p q r s
    [0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0], #A
    [0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0], #B
    [0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0], #C
    [0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0], #D
    [0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0], #E
    [0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0], #F
    [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0], #G
    [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0], #H
    [0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0], #I
    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], #J
    [0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0], #K
    [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0], #L
    [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0], #M
    [0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0], #N
    [0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0], #O
    [0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0], #P
    [0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0], #Q
    [0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0], #R
    [0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0]  #S
]

LARGE_DIAMOND_BOARD = [
    #a b c d e f g h i j k l m n o p q r s t u v w
    [0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0], #A
    [0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0], #B
    [0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0], #C
    [0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0], #D
    [0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0], #E
    [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0], #F
    [0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0], #G
    [0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0], #H
    [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0], #I
    [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0], #J
    [0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0], #K
    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], #L
    [0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0], #M
    [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0], #N
    [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0], #O
    [0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0], #P
    [0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0], #Q
    [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0], #R
    [0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0], #S
    [0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0], #T
    [0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0], #U
    [0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0], #V
    [0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0], #W
]

SMALL_TRIANGLE_BOARD = [
    #a b c d e f g h i j k l m
    [0,0,0,0,0,0,1,0,0,0,0,0,0], #A
    [0,0,0,0,0,1,1,1,0,0,0,0,0], #B
    [0,0,0,0,1,1,1,1,1,0,0,0,0], #C
    [0,0,0,1,1,1,1,1,1,1,0,0,0], #D
    [0,0,1,1,1,1,1,1,1,1,1,0,0], #E
    [0,1,1,1,1,1,1,1,1,1,1,1,0], #F
    [1,1,1,1,1,1,1,1,1,1,1,1,1]  #G
]

MEDIUM_TRIANGLE_BOARD = [
    #a b c d e f g h i j k l m n o p q r s
    [0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0], #A
    [0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0], #B
    [0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0], #C
    [0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0], #D
    [0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0], #E
    [0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0], #F
    [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0], #G
    [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0], #H
    [0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0]  #I
]

LARGE_TRIANGLE_BOARD = [
    #a b c d e f g h i j k l m n o p q r s t u v w
    [0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0], #A
    [0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0], #B
    [0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0], #C
    [0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0], #D
    [0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0], #E
    [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0], #F
    [0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0], #G
    [0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0], #H
    [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0], #I
    [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0], #J
    [0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0], #K
    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], #L
]

if __name__ == '__main__':

    def test_board(board: list[list[int]], name: str) -> None:
        '''
        Verifies that a board is valid.
        A board is valid if it only contains 0 and 1.

        :param board: The board to test.
        :param name: The name of the board.
        '''
        print(f'Testing {name}...')
        flat = [item for sublist in board for item in sublist]
        assert all(x in [0, 1] for x in flat), f'{name} contains invalid values'
        print('✔ OK')
    
    def display_board(board: list[list[int]], name: str) -> None:
        '''
        Displays a board in a readable format, with helpful side marks.

        :param board: The board to display.
        :param name: The name of the board.
        '''

        print(f'== {name} ==')
        alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
        top_letters = [alphabet[i].lower() for i in range(len(board[0]))]
        print('  ' + ' '.join(top_letters))
        for i in range(len(board)):
            print(alphabet[i], end=' ')
            row = [ '■' if x == 1 else '.' for x in board[i] ]
            print(' '.join(row) + f' {i}')

        # We use modulo to avoid double digit numbers which would unalign the indexes.
        bottom_numbers = [str(i % 10) for i in range(len(board[0]))]
        print('  ' + ' '.join(bottom_numbers))

    # Validity checks
    test_board(SMALL_CIRCLE_BOARD, '[S] Circle Board')
    test_board(MEDIUM_CIRCLE_BOARD, '[M] Circle Board')
    test_board(LARGE_CIRCLE_BOARD, '[L] Circle Board')

    test_board(SMALL_DIAMOND_BOARD, '[S] Diamond Board')
    test_board(MEDIUM_DIAMOND_BOARD, '[M] Diamond Board')
    test_board(LARGE_DIAMOND_BOARD, '[L] Diamond Board')
    
    test_board(SMALL_TRIANGLE_BOARD, '[S] Triangle Board')
    test_board(MEDIUM_TRIANGLE_BOARD, '[M] Triangle Board')
    test_board(LARGE_TRIANGLE_BOARD, '[L] Triangle Board')

    # Visual checks
    display_board(SMALL_CIRCLE_BOARD, '[S] Circle Board')
    display_board(MEDIUM_CIRCLE_BOARD, '[M] Circle Board')
    display_board(LARGE_CIRCLE_BOARD, '[L] Circle Board')

    display_board(SMALL_DIAMOND_BOARD, '[S] Diamond Board')
    display_board(MEDIUM_DIAMOND_BOARD, '[M] Diamond Board')
    display_board(LARGE_DIAMOND_BOARD, '[M] Diamond Board')

    display_board(SMALL_TRIANGLE_BOARD, '[S] Triangle Board')
    display_board(MEDIUM_TRIANGLE_BOARD, '[M] Triangle Board')
    display_board(LARGE_TRIANGLE_BOARD, '[L] Triangle Board')